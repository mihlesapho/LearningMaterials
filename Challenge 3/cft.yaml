AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy a Lambda custom resource for Cloudformation to perform Infracost operations for ACME Corp"

Parameters:
  ParamS3Bucket:
    Description: The S3 Bucket that holds the lambda code
    Type: String

  ParamS3Key:
    Description: The S3 key for the lambda code zip file
    Type: String

  InfracostAPIKey:
    Description: The API key used to access the Infracost API
    Type: String

  apiGatewayName:
    Type: String
    Default: Infracost_API

  apiGatewayStageName:
    Type: String
    Default: Test

  apiGatewayHTTPMethod:
    Type: String
    Default: GET

  lambdaFunctionName:
    Type: String
    Default: Infracost_API_Call

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaToWriteLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              - Sid: AllowLambdaToCreateLogGroups
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetResourcePolicy'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                  - 'secretsmanager:ListSecrets'
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:*"
      RoleName: !Sub "Infracost-Role-${AWS::StackName}"
      Path:
        Fn::Sub: /

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamS3Bucket
        S3Key: !Ref ParamS3Key
      Description: 'Custom CloudFormation resource used for Infracost operations'
      FunctionName: !Ref lambdaFunctionName
      Handler: 'Event_Handler.lambda_handler'
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiGatewayName

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/

  InfracostKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: Infracost_Key
      Description: This secret has a hardcoded password in SecretString (use GenerateSecretString instead)
      SecretString: !Ref InfracostAPIKey
 
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}

  LambdaFunctionARN:
    Description: The ARN of the lambda function
    Value:
      !GetAtt lambdaFunction.Arn