AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy a Lambda custom resource for Cloudformation to perform Infracost operations for ACME Corp"

Parameters:
  ParamS3Bucket:
    Description: The S3 Bucket that holds the lambda code
    Type: String

  ParamS3Key:
    Description: The S3 key for the lambda code zip file
    Type: String

  # QueueKMSKey:
  #   Type: String
  #   Description: KMS Key Id used to encrypt the event SQS queue
    
  InfracostAPIKey:
    Description: The API key used to access the Infracost API
    Type: String
    Default: '{"Infracost_Key" : "<YOUR_KEY_HERE>"}'
  
  DefaultSNSendpoint:
    Description: The email address that recieves EC2 prices
    Type: String
    Default: mihle.sapho@accenture.com
  
  lambdaFunctionName:
    Type: String
    Default: Infracost_API_Call

  UserName:
    Type: String
    Default: pluralsight-fee89c48
    Description: Username of owner

Resources:
  SQSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: A symmetric encryption KMS key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: sqs-ch3-key
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${UserName}'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:user/${UserName}'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'  
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  SQSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: SQSKeyAlias
      TargetKeyId: !Ref SQSKey

  eventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'atcseventqueue'
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref SQSKey
      
  EventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: 'EC2creation'
      EventPattern: 
        source: 
          - "aws.ec2"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource: 
            - "ec2.amazonaws.com"
          eventName: 
            - "RunInstances"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt eventQueue.Arn
          Id: "InfraSQSqueue"

  # Allow EventBridge to invoke SQS
  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt eventQueue.Arn
      Queues:
        - Ref: eventQueue
      
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'atcseventnotices'
      FifoTopic: false
      TopicName: 'atcsevents'
      Subscription:
      - Endpoint: !Ref DefaultSNSendpoint
        Protocol: email

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaToWriteLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              - Sid: AllowLambdaToCreateLogGroups
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetResourcePolicy'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                  - 'secretsmanager:ListSecrets'
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:TagQueue'
                  - 'sqs:UntagQueue'
                  - 'sqs:PurgeQueue'
                  - 'sqs:GetQueueAttributes'
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:GetKeyPolicy
                  - kms:PutKeyPolicy
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:CreateGrant
                  - kms:ReEncrypt
                  - kms:GenerateDataKey
                # WARNING
                # Lock this Resource down when deploying in a real environment
                Resource: '*'
      RoleName: !Sub "Infracost-Role-${AWS::StackName}"
      Path:
        Fn::Sub: /

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamS3Bucket
        S3Key: !Ref ParamS3Key
      Description: 'Custom CloudFormation resource used for Infracost operations'
      FunctionName: !Ref lambdaFunctionName
      Handler: 'Event_Handler.lambda_handler'
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

  InfracostKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: Infracost_Key
      Description: This secret contains the Infracost API key
      SecretString: !Ref InfracostAPIKey
 
Outputs:
  LambdaFunctionARN:
    Description: The ARN of the lambda function
    Value:
      !GetAtt lambdaFunction.Arn