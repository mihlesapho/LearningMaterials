AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy a Lambda custom resource for Cloudformation to perform Infracost operations for ACME Corp"

Parameters:
  ParamS3Bucket:
    Description: The S3 Bucket that holds the lambda code
    Type: String

  TSMParamS3Key:
    Description: The S3 key for the Determine Price lambda code zip file
    Type: String

  DPParamS3Key:
    Description: The S3 key for the Determine Price lambda code zip file
    Type: String

  SIParamS3Key:
    Description: The S3 key for the Stop Instance lambda code zip file
    Type: String

  InfracostAPIKey:
    Description: The API key used to access the Infracost API
    Type: String
  
  DefaultSNSendpoint:
    Description: The email address that recieves EC2 prices
    Type: String
    Default: mihlesapho@gmail.com
    
Resources:
  eventQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'atcseventsqueue'
      VisibilityTimeout: 60

  MyEventBus: 
    Type: AWS::Events::EventBus
    Properties: 
        Name: "InfracostCustomEventBus"

  EventRule:
    Type: AWS::Events::Rule
    Properties: 
      EventBusName: "InfracostCustomEventBus"
      Description: 'EC2creation'
      EventPattern: 
        source: 
          - "aws.ec2"
        detail-type: 
          - "AWS API Call via CloudTrail"
        detail: 
          eventSource: 
            - "ec2.amazonaws.com"
          eventName: 
            - "RunInstances"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt eventQueue.Arn
          Id: "InfraSQSqueue"

  # Allow EventBridge to invoke SQS
  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt eventQueue.Arn
      Queues:
        - Ref: eventQueue
      
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'atcseventnotifications'
      FifoTopic: false
      TopicName: 'atcseventstopic'
      Subscription:
      - Endpoint: !Ref DefaultSNSendpoint
        Protocol: email

  DestinationEventBridgeIAMrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'DestinationBusRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - sts.amazonaws.com
          Action: 
            - sts:AssumeRole
      Policies:
      - PolicyName: PutEventsBusToBus
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - events:PutEvents
            Resource:
            - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowLambdaToWriteLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              - Sid: AllowLambdaToCreateLogGroups
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetResourcePolicy'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                  - 'secretsmanager:ListSecrets'
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:ChangeMessageVisibility'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:TagQueue'
                  - 'sqs:UntagQueue'
                  - 'sqs:PurgeQueue'
                  - 'sqs:GetQueueAttributes'
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToAccessSns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowStopEc2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:Stop*'
                Resource: "*"
        - PolicyName: AllowStepAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'states:*'
                Resource: "*"
      RoleName: !Sub "Infracost-Role-${AWS::StackName}"
      Path:
        Fn::Sub: /

  TSMlambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamS3Bucket
        S3Key: !Ref TSMParamS3Key
      Description: 'Custom CloudFormation resource used to trigger Step Functions'
      FunctionName: 'TriggerStepMachine'
      Handler: 'TriggerStepMachine.lambda_handler'
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60

  DPlambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamS3Bucket
        S3Key: !Ref DPParamS3Key
      Description: 'Custom CloudFormation resource used for Infracost operations'
      FunctionName: 'DeterminePrice'
      Handler: 'DeterminePrice.lambda_handler'
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60

  SIlambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          S3Bucket: !Ref ParamS3Bucket
          S3Key: !Ref SIParamS3Key
        Description: 'Custom CloudFormation resource used to stop EC2 instances'
        FunctionName: 'StopInstance'
        Handler: 'StopInstance.lambda_handler'
        MemorySize: 128
        Role: !GetAtt LambdaRole.Arn
        Runtime: python3.8
        Timeout: 60

  TSMlambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/TriggerStepMachine'
      RetentionInDays: 90

  DPlambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/DeterminePrice'
      RetentionInDays: 90
  
  SIlambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/StopInstance'
      RetentionInDays: 90

  SMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/vendedlogs/states/InfracostAPI-StateMachine-Logs'
      RetentionInDays: 90

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: AllowLambdaToWriteLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vendedlogs/states/*:*"
              - Sid: AllowLambdaToCreateLogGroups
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
  
  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: 'InfracostAPI-StateMachine'
      DefinitionString: 
        !Sub
          - |-
            {
              "Comment": "Step functions used to determine EC2 prices being spun up and close them if they're over budget",
              "StartAt": "DeterminePrice",
              "States": {
                "DeterminePrice": {
                  "Type": "Task",
                  "Resource": "${DPlambdaArn}",
                  "Next": "Decision"
                },
                "Decision": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.OverPrice",
                      "BooleanEquals": true,
                      "Next": "StopInstance"
                    }
                  ],
                  "Default": "PassState"
                },
                "PassState": {
                  "Type": "Pass",
                  "End": true
                },
                "StopInstance": {
                  "Type": "Task",
                  "Resource": "${SIlambdaArn}",
                  "End": true
                }
              }
            }
          - {DPlambdaArn: !GetAtt ["DPlambdaFunction" , "Arn"], SIlambdaArn: !GetAtt ["SIlambdaFunction" , "Arn"]}
      RoleArn: !GetAtt StatesExecutionRole.Arn

  InfracostKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: Infracost_Key
      Description: This secret contains the Infracost API key
      SecretString: !Ref InfracostAPIKey
 
Outputs:
  LambdaFunctionARN:
    Description: The ARN of the Trigger lambda function
    Value:
      !GetAtt DPlambdaFunction.Arn